% \VignetteIndexEntry{Simple variable interpolation in R}
% \VignetteDepends{GetoptLong}
% \VignetteKeywords{variable interpolation}
% \VignettePackage{GetoptLong}
%\VignetteCompiler{knitr}
%\VignetteEngine{knitr::knitr}

\documentclass{article}

\title{Simple variable interpolation in R}

\author{Zuguang Gu {\tt <z.gu@dkfz.de>}}
\usepackage[margin=1in, a4paper]{geometry}

\usepackage{hyperref}
\begin{document}

\maketitle 

There are several ways to construct strings in {\it R} such as {\tt paste}. However,
when the string which is going to be constructed is so complicated, using {\tt paste}
will be a nightmare. For example, we want to put some parameters as title in a plot.

<<>>==
region = c(1, 2)
value = 4
name = "name"
str = paste("region = (", region[1], ", ", region[2], "), value = ", value, 
            ", name = '", name, "'", sep = "")
cat(str)
@

As you can see, it is hard to read and very easy to make mistakes. (Syntax highlighting may be 
helpful to match quotes, but it is still quite annoying to see so many quotes.)

In {\it Perl}, we always use variable interpolation to construct complicated strings in 
which variables are started with special marks (sigil), and variables will be replaced with
their real values. In this package, we aim to implement variable interpolation in {\it R}.
The idea is rather simple: use special marks to identify variables and then
replace with their values. The function here is {\tt qq} which is named from the
subroutine with the same name in {\it Perl} (It stands for double quote). Using variable interpolation, above
example can be written as:

<<>>==
library(GetoptLong)

str = qq("region = (@{region[1]}, @{region[2]}), value = @{value}, name = '@{name}'")
cat(str)
@

Or use the shortcut function {\tt qqcat}:

<<>>==
qqcat("region = (@{region[1]}, @{region[2]}), value = @{value}, name = '@{name}'")
@

One feature of {\tt qqcat} is you can set a global prefix to the messages by {\tt qq.options("cat\_prefix")}, either a string or a function:

<<>>==
qq.options("cat_prefix" = "[INFO] ")
qqcat("This is a message")

qq.options("cat_prefix" = function() format(Sys.time(), "[%Y-%m-%d %H:%M:%S] "))
qqcat("This is a message")
Sys.sleep(2)
qqcat("This is a message after 2 seconds")

qq.options("cat_prefix" = "")
qqcat("This is a message")
@

You can shut down all messages produced by {\tt qqcat} by {\tt qq.options("cat\_verbose" = FALSE)}. 

<<>>==
qq.options("cat_prefix" = "[INFO] ", "cat_verbose" = FALSE)
qqcat("This is a message")
@

Also you can set a prefix which has local effect. 
<<>>==
qq.options(RESET = TRUE)
qq.options("cat_prefix" = "[DEBUG] ")
qqcat("This is a message", cat_prefix = "[INFO] ")
qqcat("This is a message")
@

<<eval = TRUE, results = 'hide', echo = FALSE>>==
qq.options(RESET = TRUE)
@

You can use {\tt cat\_verbose} together with {\tt GetoptLong()} when you want to run the R script in command line.
In following example code, if you do not specify {\tt -}{\tt -verbose}, all messages will be shut down.

<<eval = FALSE>>==
GetoptLong(c(
    "verbose", "Print message"
))
qq.options("cat_verbose" = verbose)
qqcat("This is a message")
@

<<results = 'hide'>>==
qq.options(RESET = TRUE)
@

Not only simple scalars but also pieces of codes can be interpolated:

<<>>==
n = 1
qqcat("There @{ifelse(n == 1, 'is', 'are')} @{n} dog@{ifelse(n == 1, '', 's')}.\n")
n = 2
qqcat("There @{ifelse(n == 1, 'is', 'are')} @{n} dog@{ifelse(n == 1, '', 's')}.\n")
@

{\bf NOTE:} Since {\tt qq} as the function name is very easy to be used by other packages
(E.g., in {\tt lattice}, there is a homonymic function) and if so, you may enforce
{\tt qq} in your working environment as the function in {\tt GetoptLong} by:

<<eval = FALSE>>==
qq = GetoptLong::qq
@

\section{Code patterns}
In above exmaple, {\tt @\{\}} is used to mark variables. Later, variable names will be extracted from these marks
and replaced with their real values.

The marking code pattern can be any type. But you should make sure it is easy to tell the difference
from other part in the string. You can set your code pattern as an argument in {\tt qq}. The default pattern
is {\tt @\textbackslash\textbackslash\{CODE\textbackslash\textbackslash\}} because  we only permit {\tt CODE}
to return simple vectors and {\tt @} is a sigil representing array in {\it Perl}.

<<>>==
x = 1
qqcat("x = #{x}", code.pattern = "#\\{CODE\\}")
@

Or set in {\tt qq.options} as a global setting:

<<eval = FALSE>>=
qq.options("code.pattern" = "#\\{CODE\\}")
@

As you can guess, in {\tt @\textbackslash\textbackslash\{CODE\textbackslash\textbackslash\}}, {\tt CODE} will be replaced with {\tt .*?} to construct a regular
expression and to match variable names in the string. So if your {\tt code.pattern} contains special characters,
make sure to escape them. Some candidate {\tt code.pattern} are:

<<eval = FALSE>>=
code.pattern = "@\\{CODE\\}"    # default style
code.pattern = "@\\[CODE\\]"
code.pattern = "@\\(CODE\\)"
code.pattern = "%\\{CODE\\}"
code.pattern = "%\\[CODE\\]"
code.pattern = "%\\(CODE\\)"
code.pattern = "\\$\\{CODE\\}"
code.pattern = "\\$\\[CODE\\]"
code.pattern = "\\$\\(CODE\\)"
code.pattern = "#\\{CODE\\}"
code.pattern = "#\\[CODE\\]"
code.pattern = "#\\(CODE\\)"
code.pattern = "\\[%CODE%\\]"  # Template Toolkit (Perl module) style :)
@

Since we just replace {\tt CODE} to {\tt .*?}, the function will only match to the first right parentheses/brackets.
(In {\it Perl}, I always use recursive regular expression to extract such pairing parentheses. But in {\it R}, it seems difficult.)
So, for example, if you are using {\tt @\textbackslash\textbackslash[CODE\textbackslash\textbackslash]} and your string is {\tt "@[a[1]]"}, it will fail to
extract the correct variable name while only extracts {\tt a[1}, finally it generates an error when executing {\tt a[1}. In such condition, you should use other pattern styles
that do not contain {\tt []}.

Finally, I suggest a more safe code pattern style that you do not need to worry about parentheses stuff:

<<eval = FALSE>>==
code.pattern = "`CODE`"
@

\section{Where to look for variables}

It will first look up in the envoking environment, then through searching path. Users can also pass values of variables
as a list like:

<<>>==
x = 1
y = 2
qqcat("x = @{x}, y = @{y}", envir = list(x = "a", y = "b"))
@

If variables are passed through list, {\tt qq} only looks up in the specified list.

\section{Variables should only return vectors}

{\tt qq} only allows variables to return vectors. The whole string will be interpolated repeatedly according to longest vectors,
and finally concatenated into a single long string.

<<>>==
x = 1:6
qqcat("@{x} is an @{ifelse(x %% 2, 'odd', 'even')} number.\n")


y = c("a", "b")
z = c("A", "B", "C", "D", "E")
qqcat("@{x}, @{y}, @{z}\n")
@

This feature is especially useful if you want to generate a report such as formatted in a HTML table:

<<>>==
name = letters[1:4]
value = 1:4
qqcat("<tr><td>@{name}</td><td>@{value}</td><tr>\n")
@

The returned value can also be a vector while not collapsed into one string:
<<>>==
str = qq("@{x}, @{y}, @{z}", collapse = FALSE)
length(str)
str
@

\section{You can also interpolate more complicated codes}

Besides simple variables, you can also put chunk of codes in the string. 
Since {\tt qq} takes value of the last variable in the chunk as final returning value, you need 
to explicitly specify the return value in the chunk.

Following example is another way to contruct a HTML table in which the first row is assigned with class name.

<<>>==
name = letters[1:4]
value = 1:4
str = qq("`text = character(length(name))
  for(i in seq_along(name)) {
    if(i == 1) {
      text[i] = qq(\"<tr class='highlight'><td>@{name[i]}</td><td>@{value[i]}</td></tr>\n\")
    } else {
      text[i] = qq(\"<tr><td>@{name[i]}</td><td>@{value[i]}</td></tr>\n\")
    }
  }
text
`", code.pattern = "`CODE`")
@

<<>>==
cat(str)
@

In above example, the string also contains a {\tt qq} function, so please use different code patterns for them.

\section{Simple template system}
More advanced, you can make a simple template system. E.g., put following code in {\tt template.html}.
In the template, {\it R} codes are marked by {\tt [\%} and {\tt \%]}. Again, if {\tt qq} is called inside the {\it R} codes in
the template, you should use different code pattern instead of pattern in the template. That's why we use
a complicated code pattern ({\tt \textbackslash\textbackslash[\%CODE\%]\textbackslash\textbackslash\}}) in the template.

<<eval = TRUE, echo = FALSE, results = 'makeup', comment = "", highlight = FALSE>>==
html = "<html>
<body>
<h2>Report for [% report_name %]</h2>
<table>
<tr><th>name</th><th>value</th></tr>
[% 
i = seq_along(name)
qq(\"<tr@{ifelse(i == 1, ' class=\\\"highlight\\\"', '')}><td>@{name}</td><td>@{value}</td></tr>\n\")
%]
</table>
</body>
</html>
"
cat(html)
@


Read {\tt template.html} and do the interpolation:
<<eval = FALSE, echo = TRUE>>==
template = paste(readLines("template.html"), collapse = "\n")

report_name = "test"
name = letters[1:4]
value = 1:4
html = qq(template, code.pattern = "\\[%CODE%\\]")
writeLines(html, con = "report.html")
@

You will get a report like:

<<eval = TRUE, echo = FALSE, results = 'makeup', comment = "", highlight = FALSE>>==
report_name = "test"
name = letters[1:4]
value = 1:4
qqcat(html, code.pattern = "\\[%CODE%\\]")
@

\end{document}
